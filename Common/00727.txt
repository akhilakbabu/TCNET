unit ListTagNames;

interface

uses
 // Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
 // Dialogs,ClassDefs, XML.UTILS, XML.STUDENTS;
   Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Menus, StdCtrls,TimeChartGlobals,ClassDefs,printers,GlobalToTcAndTcextra,
  XML.DISPLAY, XML.STUDENTS,SuWnd, ExtCtrls;


type
  TTagNames = class(TCodeWin)
    ListBox1: TListBox;
    procedure FormCreate(Sender: TObject);
    procedure LoadTagName;

    private
     { Private declarations }
    public
    { Public declarations }

    procedure PaintItem(i:integer;SelFlag:boolean); override;

    procedure PaintHead; override;

  end;



var
  TagNames: TTagNames;

implementation
         //  uses tcommon,TimeChartGlobals,dlgcommon,stcommon, EditTag,uAMGStudent;
            uses main,tcommon,tcommon2,addclass,edclass,delclass,lenclass,showclas,tcommon5,uAMGStudent;
{$R *.dfm}

{type TPrintTagWin=class(TPrintCodeWin)
  public
 //  procedure head; override;
   procedure SetTabs; override;
 end;

 type TOutTagWin=class(TOutCodeWin)
  public
   procedure head; override;
   function CodeToPrint(i:integer):string; override;
 end;

var
 PrintTagWin:    TPrintTagWin;
 OutTagWin:      TOutTagWin;

function TOutTagWin.CodeToPrint(i:integer):string;
begin
 result:=ClassCode[RollClassPoint[i]];
end;


procedure TOutTagWin.head;
begin
 printLine(['Roll Class Codes: ',inttostr(Totalcodes),
     ' Code Length: ',inttostr(LenClassCodes)]);
 newline;
 newline;
end;

procedure TPrintTagWin.SetTabs;
begin
 setlength(PrntTabs,3);
 TotalCodes:=RollClassPoint[0];
 CodeWidth:=fwprntTag +prntBlankwidth;   // fwPrntClass+prntBlankwidth;
 CalcPrintCodeFit;
end;   }

{procedure TPrintTagWin.head;
begin
 codeColor:=cpClass;
 fcolor(cpNormal);
 UnderlineOn;
 printw2('Roll Class Codes: ',inttostr(TotalCodes));
 printw2('  Code Length: ',inttostr(LenClassCodes));
 printw(PageCount);
 UnderlineOff;
 x:=0; y:=y+2*PrnttxtHeight;
 fcolor(codeColor);
end; }

{procedure TTagNames.setTabs;
begin
 setlength(Tabs,3);
 TotalCodes:=RollClassPoint[0];
 headwidth:=canvas.textwidth('Roll Class Codes: 99   Code length: 8 ');
 CodeWidth:=fwClass+blankWidth;
 //CodeWidth:=fwprntTag +prntBlankwidth;
 //CalcTabStField ;
 //CalcScreenCodeFit;
  LoadTagName;
 maxW:=CodeWidth*CodeFit;
 ReDoSelection;
end;}
 procedure TTagNames.PaintItem(i:integer;SelFlag:boolean);
begin
 printw(ClassCode[RollClassPoint[i]]);
 fcolor(codecolor);
end;
procedure TTagNames.PaintHead;
begin
 codeColor:=cpClass; {subject}
 {Headings}
 // printw2('Tag:         ',inttostr(TotalCodes));
 // printw2('  Tag Name:  ',inttostr(LenClassCodes));
  printw2('Tag                   ','');
  printw2('    Tag Name              ','');

  newline;
  newline;
  LoadTagName;
end;

procedure TTagNames.FormCreate(Sender: TObject);
begin
//setWindowDefaults(self,wnGroupSub);
//setWindowDefaults(self,2);
//LoadTagName;
end;

procedure TTagNames.LoadTagName;
var
  i: Integer;
  lTag: TAMGTag;
begin
   ListBox1.Items.Clear;
   ListBox1.Font.Color := clBlack;
   ListBox1.Items.Add('Tag                    Tag Name');
   ListBox1.Items.Add(' ');
  for i := 0 to Tags.Count - 1 do
  begin
    lTag := TAMGTag(Tags.Items[i]);
    ListBox1.Items.Add(' '+lTag.Code+'                            '+lTag.TagName)  ;

  end;
end;
   //  printw (lTag.Code+'                '+  lTag.TagName);
  //  newline;


end.